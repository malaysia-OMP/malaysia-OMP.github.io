name: Refresh GitHub App Token

on:
  schedule:
    - cron: "*/9 * * * *"  # Runs every 9 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  refresh-token:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: pip install PyJWT requests cryptography

      - name: Generate New JWT and Update Secret
        env:
          APP_ID: "YOUR_GITHUB_APP_ID"
          APP_INSTALLATION_ID: "YOUR_INSTALLATION_ID"
          GH_PAT: "YOUR_PERSONAL_ACCESS_TOKEN"
        run: |
          python3 <<EOF
          import os
          import jwt
          import time
          import requests
          from cryptography.hazmat.primitives import serialization
          from cryptography.hazmat.backends import default_backend

          # ✅ Hardcoded Private Key (Use with caution!)
          PRIVATE_KEY = """
          -----BEGIN RSA PRIVATE KEY-----
          MIIEpAIBAAKCAQEA0SPe5hYPlI7j05pnokywmnuLP5anGbWEPhS7BkPVBWb7h/gA
          IxVhbYsESkiTZJcEqfn1Ffb61Sao0WngqB+LW6yZswU6MgF87fZJ03K/0Ozvrofq
          GF6HS00LKsgAYvXP57enepVppPMBxIfOsEhl98OtKbJhvwiasYC2aPjYljRswQ0A
          dEfriQyjVaKgzE8VZ/NfTWlADdo6mIx+RM0RGjd4CakwBdYtBjbS9zupehL0Kycn
          F0Lt31qM0Ec4qG+F84h6nQGRF96PQlIatluwLOMCXtYjvBnwts+UgiiNt7GJ4drc
          9cR6GCVeKz1cjNVGBBK+SHlY1u1169W/B+ZEnQIDAQABAoIBABiJddhW1EMgtJgZ
          8Hi5OKsXPZIbUcWRZ0+FTSACC1cT6wTb0uBK3OBmQ/2XIDvYAAMVQWzvSiSB4aKY
          InR3Jvl9eZboURiW1hpxH95AA0M22TQH3C45wPPTuTCuwGTb5CWShYK7Tua8YAO3
          z0cdZ2E3QvS2agNotgWHTV9pere8fo4aTGBQunzlGEXzfHo7TtV0m83X+8IOAuMM
          Pkn309FC5SHj168O+J9NLv7xLag9Pij65l2R6aC+skRlfh/LcfMcoJ4r71H7qrc3
          wj+hDvT5c9LINEzbybGEb2H1OYJBNX1racKUzRF43X0sH67cX0iFpjpMQbp5ZMfO
          DvtgQd0CgYEA6RSLT0vpqfeqpB3sNUhnuwihdV4zZN5lXvnxYBfhD1AUhQFskO4K
          6EiwTnIDW+IAgP1RZ6m6uTFnGQ+lJIOBjL82AC5bRDIgrBAdrm5o0BDXfLzHxpw5
          kpEttC0L3OKbXnut3JVI544kRWqbPlH8TfTJi40fV8vuaDoEGSkOPY8CgYEA5bSr
          KSnL3hjWhX34ul2Wz9eyjv4ZmkKbv2JOOubEU8phED0K3FMRw2IBfzjv1a/yimk6
          4meQKBKFtrRJ9u+BrPEdcwwuDuf5D79saJKNEz+ffRoUyW3IPopgbEnnq7Bn2VdL
          5IJ9pflPNNoENTycPD//bSG/rx1WYEIFoKD5nRMCgYEAwjNw43Afz5Ng5X9dCQQ8
          EZVeWdlUPw4iLmFYoTUkO0sA3dVS7Oq5wdKWu7W5YLxMqSznv9SmlJk6CqKDeYns
          ziWfS8VUG90cZeDDqkuqHvp5YSA14CDYw2sdRotl3/QbejzYnvrvlKdVR1VM5j8P
          VrDHoPPDkraC/Oqh8YjIqbcCgYEAjMNvVBVR4jN0Wm+82W/6uDllKa1bQSXqTZjP
          edbqnrJZUtslaajaLNJFOpJInrlotxsPQ6jVNUlMeY73+IQDAljrhBIFs4rCHL1g
          kKCmJRKLCN3PuTQ2TuT7e8C6YIME0LJnRowUtX4W5LtpcrpGv8E0JMtWrNgck3ZB
          /pJHBNMCgYBBcVx6lUmxfZc9wABkwklDrkT4ycDxRLc9kqU/RKx3byMyilHAoZUC
          uwYIwjeCciCQ7BYt0Ow/2gglrF2iG1EGjDE5tnllXGbGXx9QJ9Qqut2zd7OoLIKJ
          qDzsB7czyz2wzEUeq1Odpo54xl/BRP6NbNFCbC0yb+VglPxtzTBSWw==
          -----END RSA PRIVATE KEY-----
          """.strip().encode("utf-8")

          # ✅ Load GitHub App ID from ENV Variables
          APP_ID = os.getenv("APP_ID")
          INSTALLATION_ID = os.getenv("APP_INSTALLATION_ID")
          GH_PAT = os.getenv("GH_PAT")

          # ✅ Load the Private Key Object
          try:
              PRIVATE_KEY_OBJ = serialization.load_pem_private_key(
                  PRIVATE_KEY,
                  password=None,
                  backend=default_backend(),
              )
              print("✅ Private key loaded successfully!")
          except ValueError as e:
              print("❌ ERROR: Failed to load private key. Check if it's correctly formatted.")
              print(str(e))
              exit(1)

          # ✅ Generate JWT
          def generate_jwt():
              payload = {
                  "iat": int(time.time()),  # Issued at
                  "exp": int(time.time()) + 600,  # Expires in 10 min (Max GitHub allows)
                  "iss": APP_ID  # GitHub App ID
              }
              return jwt.encode(payload, PRIVATE_KEY_OBJ, algorithm="RS256")

          jwt_token = generate_jwt()
          print("✅ Generated JWT")

          # ✅ Get Installation Access Token
          url = f"https://api.github.com/app/installations/{INSTALLATION_ID}/access_tokens"
          headers = {
              "Authorization": f"Bearer {jwt_token}",
              "Accept": "application/vnd.github+json"
          }

          response = requests.post(url, headers=headers)
          token_data = response.json()
          installation_token = token_data.get("token", "")

          if not installation_token:
              raise Exception("❌ Failed to get Installation Access Token")

          print("✅ Got new Installation Access Token")

          # ✅ Update GitHub Secret (BOT_TOKEN)
          repo_owner = os.getenv("GITHUB_REPOSITORY").split("/")[0]
          repo_name = os.getenv("GITHUB_REPOSITORY").split("/")[-1]
          update_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/actions/secrets/BOT_TOKEN"

          headers = {
              "Authorization": f"token {GH_PAT}",
              "Accept": "application/vnd.github.v3+json"
          }

          secret_payload = {
              "encrypted_value": installation_token
          }

          response = requests.put(update_url, headers=headers, json=secret_payload)

          if response.status_code == 201 or response.status_code == 204:
              print("✅ BOT_TOKEN updated successfully.")
          else:
              print("❌ Failed to update BOT_TOKEN:", response.text)
          EOF

      - name: Confirm BOT_TOKEN Update
        run: echo "✅ BOT_TOKEN successfully updated!"
